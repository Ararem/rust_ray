<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="245.00"> </text><svg id="frames" x="10" width="1180" total_samples="208143994300"><g><title> rust_ray::program::stop_engine:src\program.rs:370 (1,014,666,300 samples, 0.49%)</title><rect x="33.0015%" y="101" width="0.4875%" height="15" fill="rgb(227,0,7)" fg:x="68690614400" fg:w="1014666300"/><text x="33.2515%" y="111.50"></text></g><g><title> rust_ray::program::&apos;global:src\program.rs:137 (69,714,342,900 samples, 33.49%)</title><rect x="0.0041%" y="165" width="33.4933%" height="15" fill="rgb(217,0,24)" fg:x="8575600" fg:w="69714342900"/><text x="0.2541%" y="175.50"> rust_ray::program::&apos;global:src\program.rs:137</text></g><g><title> rust_ray::program::inner:src\program.rs:140 (69,629,884,500 samples, 33.45%)</title><rect x="0.0447%" y="149" width="33.4527%" height="15" fill="rgb(221,193,54)" fg:x="93034000" fg:w="69629884500"/><text x="0.2947%" y="159.50"> rust_ray::program::inner:src\program.rs:140</text></g><g><title> rust_ray::program::process_messages:src\program.rs:144 (1,034,430,300 samples, 0.50%)</title><rect x="33.0005%" y="133" width="0.4970%" height="15" fill="rgb(248,212,6)" fg:x="68688488200" fg:w="1034430300"/><text x="33.2505%" y="143.50"></text></g><g><title> rust_ray::program::join_threads_and_quit:src\program.rs:316 (1,032,440,100 samples, 0.50%)</title><rect x="33.0014%" y="117" width="0.4960%" height="15" fill="rgb(208,68,35)" fg:x="68690478400" fg:w="1032440100"/><text x="33.2514%" y="127.50"></text></g><g><title>ThreadId(1)-main (69,723,940,400 samples, 33.50%)</title><rect x="0.0000%" y="197" width="33.4979%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="69723940400"/><text x="0.2500%" y="207.50">ThreadId(1)-main</text></g><g><title> rust_ray::program::run:src\program.rs:35 (69,719,037,800 samples, 33.50%)</title><rect x="0.0024%" y="181" width="33.4956%" height="15" fill="rgb(207,160,47)" fg:x="4902600" fg:w="69719037800"/><text x="0.2524%" y="191.50"> rust_ray::program::run:src\program.rs:35</text></g><g><title> rust_ray::engine::&apos;global:src\engine\mod.rs:43 (69,717,409,600 samples, 33.49%)</title><rect x="33.5009%" y="165" width="33.4948%" height="15" fill="rgb(228,23,34)" fg:x="69730022200" fg:w="69717409600"/><text x="33.7509%" y="175.50"> rust_ray::engine::&apos;global:src\engine\mod.rs:43</text></g><g><title> rust_ray::engine::inner:src\engine\mod.rs:46 (69,715,404,200 samples, 33.49%)</title><rect x="33.5018%" y="149" width="33.4938%" height="15" fill="rgb(218,30,26)" fg:x="69732027600" fg:w="69715404200"/><text x="33.7518%" y="159.50"> rust_ray::engine::inner:src\engine\mod.rs:46</text></g><g><title> rust_ray::engine::process_messages:src\engine\mod.rs:52 (87,406,000 samples, 0.04%)</title><rect x="66.9537%" y="133" width="0.0420%" height="15" fill="rgb(220,122,19)" fg:x="139360025800" fg:w="87406000"/><text x="67.2037%" y="143.50"></text></g><g><title>ThreadId(2)-engine_thread (69,723,549,900 samples, 33.50%)</title><rect x="33.4979%" y="197" width="33.4977%" height="15" fill="rgb(250,228,42)" fg:x="69723940400" fg:w="69723549900"/><text x="33.7479%" y="207.50">ThreadId(2)-engine_thread</text></g><g><title> rust_ray::engine::engine_thread:src\engine\mod.rs:25 (69,717,636,700 samples, 33.49%)</title><rect x="33.5008%" y="181" width="33.4949%" height="15" fill="rgb(240,193,28)" fg:x="69729853600" fg:w="69717636700"/><text x="33.7508%" y="191.50"> rust_ray::engine::engine_thread:src\engine\mod.rs:25</text></g><g><title> rust_ray::ui::event_passthrough:src\ui\mod.rs:254 (262,337,600 samples, 0.13%)</title><rect x="75.3145%" y="133" width="0.1260%" height="15" fill="rgb(216,20,37)" fg:x="156762546100" fg:w="262337600"/><text x="75.5645%" y="143.50"></text></g><g><title> rust_ray::ui::prepare_frame:src\ui\mod.rs:144 (183,852,800 samples, 0.09%)</title><rect x="75.4405%" y="133" width="0.0883%" height="15" fill="rgb(206,188,39)" fg:x="157024883700" fg:w="183852800"/><text x="75.6905%" y="143.50"></text></g><g><title> rust_ray::ui::process_messages_with_return:src\ui\mod.rs:512 (1,619,647,100 samples, 0.78%)</title><rect x="75.5288%" y="133" width="0.7781%" height="15" fill="rgb(217,207,13)" fg:x="157208736500" fg:w="1619647100"/><text x="75.7788%" y="143.50"></text></g><g><title> rust_ray::ui::obtain_data:src\ui\mod.rs:162 (321,017,400 samples, 0.15%)</title><rect x="76.7648%" y="117" width="0.1542%" height="15" fill="rgb(231,73,38)" fg:x="159781397500" fg:w="321017400"/><text x="77.0148%" y="127.50"></text></g><g><title> rust_ray::ui::draw_frame:src\ui\mod.rs:458 (35,191,538,000 samples, 16.91%)</title><rect x="78.0506%" y="101" width="16.9073%" height="15" fill="rgb(225,20,46)" fg:x="162457636400" fg:w="35191538000"/><text x="78.3006%" y="111.50"> rust_ray::ui::draw_frame:..</text></g><g><title> rust_ray::ui::maybe_rebuild_font:src\ui\mod.rs:311 (243,219,300 samples, 0.12%)</title><rect x="94.9579%" y="101" width="0.1169%" height="15" fill="rgb(210,31,41)" fg:x="197649174400" fg:w="243219300"/><text x="95.2079%" y="111.50"></text></g><g><title> rust_ray::ui::apply_custom_font:src\ui\mod.rs:361 (264,262,300 samples, 0.13%)</title><rect x="96.1273%" y="85" width="0.1270%" height="15" fill="rgb(221,200,47)" fg:x="200083157500" fg:w="264262300"/><text x="96.3773%" y="95.50"></text></g><g><title> rust_ray::ui::build_ui_impl::font_manager_ui_impl::render_font_manager:src\ui\build_ui_impl\font_manager_ui_impl.rs:16 (170,083,600 samples, 0.08%)</title><rect x="97.3720%" y="53" width="0.0817%" height="15" fill="rgb(226,26,5)" fg:x="202673904000" fg:w="170083600"/><text x="97.6220%" y="63.50"></text></g><g><title> rust_ray::ui::build_ui_impl::frame_info_ui_impl::calculate_approx_range:src\ui\build_ui_impl\frame_info_ui_impl.rs:42 (704,183,400 samples, 0.34%)</title><rect x="97.9298%" y="37" width="0.3383%" height="15" fill="rgb(249,33,26)" fg:x="203834962600" fg:w="704183400"/><text x="98.1798%" y="47.50"></text></g><g><title> rust_ray::ui::build_ui_impl::build_window:src\ui\build_ui_impl\mod.rs:27 (2,588,177,000 samples, 1.24%)</title><rect x="97.0908%" y="69" width="1.2435%" height="15" fill="rgb(235,183,28)" fg:x="202088686600" fg:w="2588177000"/><text x="97.3408%" y="79.50"></text></g><g><title> rust_ray::ui::build_ui_impl::frame_info_ui_impl::render_framerate_graph:src\ui\build_ui_impl\frame_info_ui_impl.rs:15 (1,832,876,000 samples, 0.88%)</title><rect x="97.4537%" y="53" width="0.8806%" height="15" fill="rgb(221,5,38)" fg:x="202843987600" fg:w="1832876000"/><text x="97.7037%" y="63.50"></text></g><g><title> rust_ray::ui::build_ui_impl::frame_info_ui_impl::update_frames:src\ui\build_ui_impl\frame_info_ui_impl.rs:22 (137,717,600 samples, 0.07%)</title><rect x="98.2681%" y="37" width="0.0662%" height="15" fill="rgb(247,18,42)" fg:x="204539146000" fg:w="137717600"/><text x="98.5181%" y="47.50"></text></g><g><title> rust_ray::ui::build_ui_impl::main_menu_bar:src\ui\build_ui_impl\mod.rs:70 (1,083,015,600 samples, 0.52%)</title><rect x="98.3343%" y="69" width="0.5203%" height="15" fill="rgb(241,131,45)" fg:x="204676863600" fg:w="1083015600"/><text x="98.5843%" y="79.50"></text></g><g><title> rust_ray::ui::build_ui_impl::menu:src\ui\build_ui_impl\mod.rs:161 (410,084,600 samples, 0.20%)</title><rect x="98.6576%" y="53" width="0.1970%" height="15" fill="rgb(249,31,29)" fg:x="205349794600" fg:w="410084600"/><text x="98.9076%" y="63.50"></text></g><g><title> rust_ray::ui::build_ui_impl::show_demo_window:src\ui\build_ui_impl\mod.rs:238 (567,040,500 samples, 0.27%)</title><rect x="98.8546%" y="69" width="0.2724%" height="15" fill="rgb(225,111,53)" fg:x="205759879200" fg:w="567040500"/><text x="99.1046%" y="79.50"></text></g><g><title> rust_ray::ui::redraw:src\ui\mod.rs:157 (47,957,249,600 samples, 23.04%)</title><rect x="76.3070%" y="133" width="23.0404%" height="15" fill="rgb(238,160,17)" fg:x="158828383600" fg:w="47957249600"/><text x="76.5570%" y="143.50"> rust_ray::ui::redraw:src\ui\mod.rs:1..</text></g><g><title> rust_ray::ui::outer_render:src\ui\mod.rs:302 (46,683,218,300 samples, 22.43%)</title><rect x="76.9191%" y="117" width="22.4283%" height="15" fill="rgb(214,148,48)" fg:x="160102414900" fg:w="46683218300"/><text x="77.1691%" y="127.50"> rust_ray::ui::outer_render:src\ui\m..</text></g><g><title> rust_ray::ui::outer_build_ui:src\ui\mod.rs:359 (8,893,239,500 samples, 4.27%)</title><rect x="95.0748%" y="101" width="4.2726%" height="15" fill="rgb(232,36,49)" fg:x="197892393700" fg:w="8893239500"/><text x="95.3248%" y="111.50"> rust..</text></g><g><title> rust_ray::ui::build_ui_impl::build_ui:src\ui\build_ui_impl\mod.rs:56 (6,438,213,400 samples, 3.09%)</title><rect x="96.2542%" y="85" width="3.0932%" height="15" fill="rgb(209,103,24)" fg:x="200347419800" fg:w="6438213400"/><text x="96.5042%" y="95.50"> ru..</text></g><g><title> rust_ray::ui::build_ui_impl::show_metrics_window:src\ui\build_ui_impl\mod.rs:244 (458,713,500 samples, 0.22%)</title><rect x="99.1270%" y="69" width="0.2204%" height="15" fill="rgb(229,88,8)" fg:x="206326919700" fg:w="458713500"/><text x="99.3770%" y="79.50"></text></g><g><title> rust_ray::ui::event_loop_internal:src\ui\mod.rs:108 (67,789,189,000 samples, 32.57%)</title><rect x="66.9986%" y="165" width="32.5684%" height="15" fill="rgb(213,181,19)" fg:x="139453585800" fg:w="67789189000"/><text x="67.2486%" y="175.50"> rust_ray::ui::event_loop_internal:src\ui\mod.rs:108</text></g><g><title> rust_ray::ui::process_ui_event:src\ui\mod.rs:122 (55,163,365,000 samples, 26.50%)</title><rect x="73.0645%" y="149" width="26.5025%" height="15" fill="rgb(254,191,54)" fg:x="152079409800" fg:w="55163365000"/><text x="73.3145%" y="159.50"> rust_ray::ui::process_ui_event:src\ui\mod..</text></g><g><title> rust_ray::ui::request_redraw:src\ui\mod.rs:142 (457,141,600 samples, 0.22%)</title><rect x="99.3474%" y="133" width="0.2196%" height="15" fill="rgb(241,83,37)" fg:x="206785633200" fg:w="457141600"/><text x="99.5974%" y="143.50"></text></g><g><title> rust_ray::ui::font_manager::iter_font_dir:src\ui\font_manager.rs:71 (518,262,100 samples, 0.25%)</title><rect x="99.7470%" y="117" width="0.2490%" height="15" fill="rgb(233,36,39)" fg:x="207617296300" fg:w="518262100"/><text x="99.9970%" y="127.50"></text></g><g><title> rust_ray::ui::font_manager::internal_iter:src\ui\font_manager.rs:73 (510,085,800 samples, 0.25%)</title><rect x="99.7509%" y="101" width="0.2451%" height="15" fill="rgb(226,3,54)" fg:x="207625472600" fg:w="510085800"/><text x="100.0009%" y="111.50"></text></g><g><title> rust_ray::ui::init_ui:src\ui\mod.rs:560 (901,098,700 samples, 0.43%)</title><rect x="99.5670%" y="165" width="0.4329%" height="15" fill="rgb(245,192,40)" fg:x="207242774800" fg:w="901098700"/><text x="99.8170%" y="175.50"></text></g><g><title> rust_ray::ui::create_font_manager:src\ui\mod.rs:647 (544,612,300 samples, 0.26%)</title><rect x="99.7383%" y="149" width="0.2617%" height="15" fill="rgb(238,167,29)" fg:x="207599261200" fg:w="544612300"/><text x="99.9883%" y="159.50"></text></g><g><title> rust_ray::ui::font_manager::reload_fonts_list:src\ui\font_manager.rs:45 (544,238,600 samples, 0.26%)</title><rect x="99.7385%" y="133" width="0.2615%" height="15" fill="rgb(232,182,51)" fg:x="207599634900" fg:w="544238600"/><text x="99.9885%" y="143.50"></text></g><g><title>all (208,143,994,300 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="208143994300"/><text x="0.2500%" y="223.50"></text></g><g><title>ThreadId(3)-ui_thread (68,696,504,000 samples, 33.00%)</title><rect x="66.9957%" y="197" width="33.0043%" height="15" fill="rgb(208,69,12)" fg:x="139447490300" fg:w="68696504000"/><text x="67.2457%" y="207.50">ThreadId(3)-ui_thread</text></g><g><title> rust_ray::ui::ui_thread:src\ui\mod.rs:57 (68,690,607,900 samples, 33.00%)</title><rect x="66.9985%" y="181" width="33.0015%" height="15" fill="rgb(235,93,37)" fg:x="139453386400" fg:w="68690607900"/><text x="67.2485%" y="191.50"> rust_ray::ui::ui_thread:src\ui\mod.rs:57</text></g></svg></svg>